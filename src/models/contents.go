// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Content is an object representing the database table.
type Content struct {
	ContentID   int       `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	ContentName string    `boil:"content_name" json:"content_name" toml:"content_name" yaml:"content_name"`
	GenreID     int       `boil:"genre_id" json:"genre_id" toml:"genre_id" yaml:"genre_id"`
	CreatedAt   null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *contentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentColumns = struct {
	ContentID   string
	ContentName string
	GenreID     string
	CreatedAt   string
	UpdatedAt   string
}{
	ContentID:   "content_id",
	ContentName: "content_name",
	GenreID:     "genre_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ContentTableColumns = struct {
	ContentID   string
	ContentName string
	GenreID     string
	CreatedAt   string
	UpdatedAt   string
}{
	ContentID:   "contents.content_id",
	ContentName: "contents.content_name",
	GenreID:     "contents.genre_id",
	CreatedAt:   "contents.created_at",
	UpdatedAt:   "contents.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ContentWhere = struct {
	ContentID   whereHelperint
	ContentName whereHelperstring
	GenreID     whereHelperint
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ContentID:   whereHelperint{field: "`contents`.`content_id`"},
	ContentName: whereHelperstring{field: "`contents`.`content_name`"},
	GenreID:     whereHelperint{field: "`contents`.`genre_id`"},
	CreatedAt:   whereHelpernull_Time{field: "`contents`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`contents`.`updated_at`"},
}

// ContentRels is where relationship names are stored.
var ContentRels = struct {
	Genre    string
	Seichies string
}{
	Genre:    "Genre",
	Seichies: "Seichies",
}

// contentR is where relationships are stored.
type contentR struct {
	Genre    *Genre      `boil:"Genre" json:"Genre" toml:"Genre" yaml:"Genre"`
	Seichies SeichySlice `boil:"Seichies" json:"Seichies" toml:"Seichies" yaml:"Seichies"`
}

// NewStruct creates a new relationship struct
func (*contentR) NewStruct() *contentR {
	return &contentR{}
}

func (r *contentR) GetGenre() *Genre {
	if r == nil {
		return nil
	}
	return r.Genre
}

func (r *contentR) GetSeichies() SeichySlice {
	if r == nil {
		return nil
	}
	return r.Seichies
}

// contentL is where Load methods for each relationship are stored.
type contentL struct{}

var (
	contentAllColumns            = []string{"content_id", "content_name", "genre_id", "created_at", "updated_at"}
	contentColumnsWithoutDefault = []string{"content_name", "genre_id"}
	contentColumnsWithDefault    = []string{"content_id", "created_at", "updated_at"}
	contentPrimaryKeyColumns     = []string{"content_id"}
	contentGeneratedColumns      = []string{}
)

type (
	// ContentSlice is an alias for a slice of pointers to Content.
	// This should almost always be used instead of []Content.
	ContentSlice []*Content
	// ContentHook is the signature for custom Content hook methods
	ContentHook func(context.Context, boil.ContextExecutor, *Content) error

	contentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentType                 = reflect.TypeOf(&Content{})
	contentMapping              = queries.MakeStructMapping(contentType)
	contentPrimaryKeyMapping, _ = queries.BindMapping(contentType, contentMapping, contentPrimaryKeyColumns)
	contentInsertCacheMut       sync.RWMutex
	contentInsertCache          = make(map[string]insertCache)
	contentUpdateCacheMut       sync.RWMutex
	contentUpdateCache          = make(map[string]updateCache)
	contentUpsertCacheMut       sync.RWMutex
	contentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contentAfterSelectMu sync.Mutex
var contentAfterSelectHooks []ContentHook

var contentBeforeInsertMu sync.Mutex
var contentBeforeInsertHooks []ContentHook
var contentAfterInsertMu sync.Mutex
var contentAfterInsertHooks []ContentHook

var contentBeforeUpdateMu sync.Mutex
var contentBeforeUpdateHooks []ContentHook
var contentAfterUpdateMu sync.Mutex
var contentAfterUpdateHooks []ContentHook

var contentBeforeDeleteMu sync.Mutex
var contentBeforeDeleteHooks []ContentHook
var contentAfterDeleteMu sync.Mutex
var contentAfterDeleteHooks []ContentHook

var contentBeforeUpsertMu sync.Mutex
var contentBeforeUpsertHooks []ContentHook
var contentAfterUpsertMu sync.Mutex
var contentAfterUpsertHooks []ContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Content) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Content) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Content) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Content) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Content) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Content) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Content) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Content) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Content) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContentHook registers your hook function for all future operations.
func AddContentHook(hookPoint boil.HookPoint, contentHook ContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contentAfterSelectMu.Lock()
		contentAfterSelectHooks = append(contentAfterSelectHooks, contentHook)
		contentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contentBeforeInsertMu.Lock()
		contentBeforeInsertHooks = append(contentBeforeInsertHooks, contentHook)
		contentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contentAfterInsertMu.Lock()
		contentAfterInsertHooks = append(contentAfterInsertHooks, contentHook)
		contentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contentBeforeUpdateMu.Lock()
		contentBeforeUpdateHooks = append(contentBeforeUpdateHooks, contentHook)
		contentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contentAfterUpdateMu.Lock()
		contentAfterUpdateHooks = append(contentAfterUpdateHooks, contentHook)
		contentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contentBeforeDeleteMu.Lock()
		contentBeforeDeleteHooks = append(contentBeforeDeleteHooks, contentHook)
		contentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contentAfterDeleteMu.Lock()
		contentAfterDeleteHooks = append(contentAfterDeleteHooks, contentHook)
		contentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contentBeforeUpsertMu.Lock()
		contentBeforeUpsertHooks = append(contentBeforeUpsertHooks, contentHook)
		contentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contentAfterUpsertMu.Lock()
		contentAfterUpsertHooks = append(contentAfterUpsertHooks, contentHook)
		contentAfterUpsertMu.Unlock()
	}
}

// One returns a single content record from the query.
func (q contentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Content, error) {
	o := &Content{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Content records from the query.
func (q contentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentSlice, error) {
	var o []*Content

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Content slice")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Content records in the query.
func (q contentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contents exists")
	}

	return count > 0, nil
}

// Genre pointed to by the foreign key.
func (o *Content) Genre(mods ...qm.QueryMod) genreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`genre_id` = ?", o.GenreID),
	}

	queryMods = append(queryMods, mods...)

	return Genres(queryMods...)
}

// Seichies retrieves all the seichy's Seichies with an executor.
func (o *Content) Seichies(mods ...qm.QueryMod) seichyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`seichies`.`content_id`=?", o.ContentID),
	)

	return Seichies(queryMods...)
}

// LoadGenre allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentL) LoadGenre(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.GenreID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}

			args[obj.GenreID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`genres`),
		qm.WhereIn(`genres.genre_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Genre")
	}

	var resultSlice []*Genre
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Genre")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for genres")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for genres")
	}

	if len(genreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Genre = foreign
		if foreign.R == nil {
			foreign.R = &genreR{}
		}
		foreign.R.Contents = append(foreign.R.Contents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GenreID == foreign.GenreID {
				local.R.Genre = foreign
				if foreign.R == nil {
					foreign.R = &genreR{}
				}
				foreign.R.Contents = append(foreign.R.Contents, local)
				break
			}
		}
	}

	return nil
}

// LoadSeichies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentL) LoadSeichies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ContentID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}
			args[obj.ContentID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`seichies`),
		qm.WhereIn(`seichies.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seichies")
	}

	var resultSlice []*Seichy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seichies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seichies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seichies")
	}

	if len(seichyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Seichies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &seichyR{}
			}
			foreign.R.Content = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContentID == foreign.ContentID {
				local.R.Seichies = append(local.R.Seichies, foreign)
				if foreign.R == nil {
					foreign.R = &seichyR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// SetGenre of the content to the related item.
// Sets o.R.Genre to related.
// Adds o to related.R.Contents.
func (o *Content) SetGenre(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Genre) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `contents` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"genre_id"}),
		strmangle.WhereClause("`", "`", 0, contentPrimaryKeyColumns),
	)
	values := []interface{}{related.GenreID, o.ContentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GenreID = related.GenreID
	if o.R == nil {
		o.R = &contentR{
			Genre: related,
		}
	} else {
		o.R.Genre = related
	}

	if related.R == nil {
		related.R = &genreR{
			Contents: ContentSlice{o},
		}
	} else {
		related.R.Contents = append(related.R.Contents, o)
	}

	return nil
}

// AddSeichies adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.Seichies.
// Sets related.R.Content appropriately.
func (o *Content) AddSeichies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Seichy) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentID = o.ContentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `seichies` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"content_id"}),
				strmangle.WhereClause("`", "`", 0, seichyPrimaryKeyColumns),
			)
			values := []interface{}{o.ContentID, rel.SeichiID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentID = o.ContentID
		}
	}

	if o.R == nil {
		o.R = &contentR{
			Seichies: related,
		}
	} else {
		o.R.Seichies = append(o.R.Seichies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &seichyR{
				Content: o,
			}
		} else {
			rel.R.Content = o
		}
	}
	return nil
}

// Contents retrieves all the records using an executor.
func Contents(mods ...qm.QueryMod) contentQuery {
	mods = append(mods, qm.From("`contents`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`contents`.*"})
	}

	return contentQuery{q}
}

// FindContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContent(ctx context.Context, exec boil.ContextExecutor, contentID int, selectCols ...string) (*Content, error) {
	contentObj := &Content{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `contents` where `content_id`=?", sel,
	)

	q := queries.Raw(query, contentID)

	err := q.Bind(ctx, exec, contentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contents")
	}

	if err = contentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contentObj, err
	}

	return contentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Content) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contents provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentInsertCacheMut.RLock()
	cache, cached := contentInsertCache[key]
	contentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentAllColumns,
			contentColumnsWithDefault,
			contentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentType, contentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentType, contentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `contents` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `contents` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `contents` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, contentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contents")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ContentID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == contentMapping["content_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ContentID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for contents")
	}

CacheNoHooks:
	if !cached {
		contentInsertCacheMut.Lock()
		contentInsertCache[key] = cache
		contentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Content.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Content) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contentUpdateCacheMut.RLock()
	cache, cached := contentUpdateCache[key]
	contentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentAllColumns,
			contentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `contents` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, contentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentType, contentMapping, append(wl, contentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contents")
	}

	if !cached {
		contentUpdateCacheMut.Lock()
		contentUpdateCache[key] = cache
		contentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `contents` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all content")
	}
	return rowsAff, nil
}

var mySQLContentUniqueColumns = []string{
	"content_id",
	"content_name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Content) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contents provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLContentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentUpsertCacheMut.RLock()
	cache, cached := contentUpsertCache[key]
	contentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contentAllColumns,
			contentColumnsWithDefault,
			contentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentAllColumns,
			contentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert contents, could not build update column list")
		}

		ret := strmangle.SetComplement(contentAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`contents`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `contents` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(contentType, contentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentType, contentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for contents")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ContentID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == contentMapping["content_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(contentType, contentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for contents")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for contents")
	}

CacheNoHooks:
	if !cached {
		contentUpsertCacheMut.Lock()
		contentUpsertCache[key] = cache
		contentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Content record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Content) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Content provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentPrimaryKeyMapping)
	sql := "DELETE FROM `contents` WHERE `content_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `contents` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contents")
	}

	if len(contentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Content) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContent(ctx, exec, o.ContentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `contents`.* FROM `contents` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContentSlice")
	}

	*o = slice

	return nil
}

// ContentExists checks if the Content row exists.
func ContentExists(ctx context.Context, exec boil.ContextExecutor, contentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `contents` where `content_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contentID)
	}
	row := exec.QueryRowContext(ctx, sql, contentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contents exists")
	}

	return exists, nil
}

// Exists checks if the Content row exists.
func (o *Content) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContentExists(ctx, exec, o.ContentID)
}
