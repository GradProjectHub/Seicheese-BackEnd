// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CheckinLog is an object representing the database table.
type CheckinLog struct {
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UserID    uint      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	SeichiID  int       `boil:"seichi_id" json:"seichi_id" toml:"seichi_id" yaml:"seichi_id"`

	R *checkinLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkinLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckinLogColumns = struct {
	CreatedAt string
	UserID    string
	SeichiID  string
}{
	CreatedAt: "created_at",
	UserID:    "user_id",
	SeichiID:  "seichi_id",
}

var CheckinLogTableColumns = struct {
	CreatedAt string
	UserID    string
	SeichiID  string
}{
	CreatedAt: "checkin_logs.created_at",
	UserID:    "checkin_logs.user_id",
	SeichiID:  "checkin_logs.seichi_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CheckinLogWhere = struct {
	CreatedAt whereHelpertime_Time
	UserID    whereHelperuint
	SeichiID  whereHelperint
}{
	CreatedAt: whereHelpertime_Time{field: "`checkin_logs`.`created_at`"},
	UserID:    whereHelperuint{field: "`checkin_logs`.`user_id`"},
	SeichiID:  whereHelperint{field: "`checkin_logs`.`seichi_id`"},
}

// CheckinLogRels is where relationship names are stored.
var CheckinLogRels = struct {
	User string
}{
	User: "User",
}

// checkinLogR is where relationships are stored.
type checkinLogR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*checkinLogR) NewStruct() *checkinLogR {
	return &checkinLogR{}
}

func (r *checkinLogR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// checkinLogL is where Load methods for each relationship are stored.
type checkinLogL struct{}

var (
	checkinLogAllColumns            = []string{"created_at", "user_id", "seichi_id"}
	checkinLogColumnsWithoutDefault = []string{"user_id", "seichi_id"}
	checkinLogColumnsWithDefault    = []string{"created_at"}
	checkinLogPrimaryKeyColumns     = []string{"created_at", "user_id"}
	checkinLogGeneratedColumns      = []string{}
)

type (
	// CheckinLogSlice is an alias for a slice of pointers to CheckinLog.
	// This should almost always be used instead of []CheckinLog.
	CheckinLogSlice []*CheckinLog
	// CheckinLogHook is the signature for custom CheckinLog hook methods
	CheckinLogHook func(context.Context, boil.ContextExecutor, *CheckinLog) error

	checkinLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkinLogType                 = reflect.TypeOf(&CheckinLog{})
	checkinLogMapping              = queries.MakeStructMapping(checkinLogType)
	checkinLogPrimaryKeyMapping, _ = queries.BindMapping(checkinLogType, checkinLogMapping, checkinLogPrimaryKeyColumns)
	checkinLogInsertCacheMut       sync.RWMutex
	checkinLogInsertCache          = make(map[string]insertCache)
	checkinLogUpdateCacheMut       sync.RWMutex
	checkinLogUpdateCache          = make(map[string]updateCache)
	checkinLogUpsertCacheMut       sync.RWMutex
	checkinLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkinLogAfterSelectMu sync.Mutex
var checkinLogAfterSelectHooks []CheckinLogHook

var checkinLogBeforeInsertMu sync.Mutex
var checkinLogBeforeInsertHooks []CheckinLogHook
var checkinLogAfterInsertMu sync.Mutex
var checkinLogAfterInsertHooks []CheckinLogHook

var checkinLogBeforeUpdateMu sync.Mutex
var checkinLogBeforeUpdateHooks []CheckinLogHook
var checkinLogAfterUpdateMu sync.Mutex
var checkinLogAfterUpdateHooks []CheckinLogHook

var checkinLogBeforeDeleteMu sync.Mutex
var checkinLogBeforeDeleteHooks []CheckinLogHook
var checkinLogAfterDeleteMu sync.Mutex
var checkinLogAfterDeleteHooks []CheckinLogHook

var checkinLogBeforeUpsertMu sync.Mutex
var checkinLogBeforeUpsertHooks []CheckinLogHook
var checkinLogAfterUpsertMu sync.Mutex
var checkinLogAfterUpsertHooks []CheckinLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CheckinLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CheckinLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CheckinLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CheckinLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CheckinLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CheckinLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CheckinLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CheckinLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CheckinLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkinLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckinLogHook registers your hook function for all future operations.
func AddCheckinLogHook(hookPoint boil.HookPoint, checkinLogHook CheckinLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		checkinLogAfterSelectMu.Lock()
		checkinLogAfterSelectHooks = append(checkinLogAfterSelectHooks, checkinLogHook)
		checkinLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		checkinLogBeforeInsertMu.Lock()
		checkinLogBeforeInsertHooks = append(checkinLogBeforeInsertHooks, checkinLogHook)
		checkinLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		checkinLogAfterInsertMu.Lock()
		checkinLogAfterInsertHooks = append(checkinLogAfterInsertHooks, checkinLogHook)
		checkinLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		checkinLogBeforeUpdateMu.Lock()
		checkinLogBeforeUpdateHooks = append(checkinLogBeforeUpdateHooks, checkinLogHook)
		checkinLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		checkinLogAfterUpdateMu.Lock()
		checkinLogAfterUpdateHooks = append(checkinLogAfterUpdateHooks, checkinLogHook)
		checkinLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		checkinLogBeforeDeleteMu.Lock()
		checkinLogBeforeDeleteHooks = append(checkinLogBeforeDeleteHooks, checkinLogHook)
		checkinLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		checkinLogAfterDeleteMu.Lock()
		checkinLogAfterDeleteHooks = append(checkinLogAfterDeleteHooks, checkinLogHook)
		checkinLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		checkinLogBeforeUpsertMu.Lock()
		checkinLogBeforeUpsertHooks = append(checkinLogBeforeUpsertHooks, checkinLogHook)
		checkinLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		checkinLogAfterUpsertMu.Lock()
		checkinLogAfterUpsertHooks = append(checkinLogAfterUpsertHooks, checkinLogHook)
		checkinLogAfterUpsertMu.Unlock()
	}
}

// One returns a single checkinLog record from the query.
func (q checkinLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CheckinLog, error) {
	o := &CheckinLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checkin_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CheckinLog records from the query.
func (q checkinLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (CheckinLogSlice, error) {
	var o []*CheckinLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CheckinLog slice")
	}

	if len(checkinLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CheckinLog records in the query.
func (q checkinLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checkin_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkinLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checkin_logs exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *CheckinLog) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkinLogL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckinLog interface{}, mods queries.Applicator) error {
	var slice []*CheckinLog
	var object *CheckinLog

	if singular {
		var ok bool
		object, ok = maybeCheckinLog.(*CheckinLog)
		if !ok {
			object = new(CheckinLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckinLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckinLog))
			}
		}
	} else {
		s, ok := maybeCheckinLog.(*[]*CheckinLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckinLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckinLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkinLogR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkinLogR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CheckinLogs = append(foreign.R.CheckinLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CheckinLogs = append(foreign.R.CheckinLogs, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the checkinLog to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CheckinLogs.
func (o *CheckinLog) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `checkin_logs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, checkinLogPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.CreatedAt, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &checkinLogR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CheckinLogs: CheckinLogSlice{o},
		}
	} else {
		related.R.CheckinLogs = append(related.R.CheckinLogs, o)
	}

	return nil
}

// CheckinLogs retrieves all the records using an executor.
func CheckinLogs(mods ...qm.QueryMod) checkinLogQuery {
	mods = append(mods, qm.From("`checkin_logs`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`checkin_logs`.*"})
	}

	return checkinLogQuery{q}
}

// FindCheckinLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckinLog(ctx context.Context, exec boil.ContextExecutor, createdAt time.Time, userID uint, selectCols ...string) (*CheckinLog, error) {
	checkinLogObj := &CheckinLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `checkin_logs` where `created_at`=? AND `user_id`=?", sel,
	)

	q := queries.Raw(query, createdAt, userID)

	err := q.Bind(ctx, exec, checkinLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checkin_logs")
	}

	if err = checkinLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checkinLogObj, err
	}

	return checkinLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CheckinLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkin_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkinLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkinLogInsertCacheMut.RLock()
	cache, cached := checkinLogInsertCache[key]
	checkinLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkinLogAllColumns,
			checkinLogColumnsWithDefault,
			checkinLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkinLogType, checkinLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkinLogType, checkinLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `checkin_logs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `checkin_logs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `checkin_logs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, checkinLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checkin_logs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreatedAt,
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for checkin_logs")
	}

CacheNoHooks:
	if !cached {
		checkinLogInsertCacheMut.Lock()
		checkinLogInsertCache[key] = cache
		checkinLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CheckinLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CheckinLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkinLogUpdateCacheMut.RLock()
	cache, cached := checkinLogUpdateCache[key]
	checkinLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkinLogAllColumns,
			checkinLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checkin_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `checkin_logs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, checkinLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkinLogType, checkinLogMapping, append(wl, checkinLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checkin_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checkin_logs")
	}

	if !cached {
		checkinLogUpdateCacheMut.Lock()
		checkinLogUpdateCache[key] = cache
		checkinLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checkinLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checkin_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checkin_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckinLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkinLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `checkin_logs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, checkinLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkinLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkinLog")
	}
	return rowsAff, nil
}

var mySQLCheckinLogUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CheckinLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkin_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkinLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCheckinLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkinLogUpsertCacheMut.RLock()
	cache, cached := checkinLogUpsertCache[key]
	checkinLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			checkinLogAllColumns,
			checkinLogColumnsWithDefault,
			checkinLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkinLogAllColumns,
			checkinLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert checkin_logs, could not build update column list")
		}

		ret := strmangle.SetComplement(checkinLogAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`checkin_logs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `checkin_logs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(checkinLogType, checkinLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkinLogType, checkinLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for checkin_logs")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(checkinLogType, checkinLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for checkin_logs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for checkin_logs")
	}

CacheNoHooks:
	if !cached {
		checkinLogUpsertCacheMut.Lock()
		checkinLogUpsertCache[key] = cache
		checkinLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CheckinLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CheckinLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CheckinLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkinLogPrimaryKeyMapping)
	sql := "DELETE FROM `checkin_logs` WHERE `created_at`=? AND `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checkin_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checkin_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkinLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkinLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkin_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkin_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckinLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkinLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkinLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `checkin_logs` WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 0, checkinLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkinLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkin_logs")
	}

	if len(checkinLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CheckinLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCheckinLog(ctx, exec, o.CreatedAt, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckinLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckinLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkinLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `checkin_logs`.* FROM `checkin_logs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, checkinLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckinLogSlice")
	}

	*o = slice

	return nil
}

// CheckinLogExists checks if the CheckinLog row exists.
func CheckinLogExists(ctx context.Context, exec boil.ContextExecutor, createdAt time.Time, userID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `checkin_logs` where `created_at`=? AND `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, createdAt, userID)
	}
	row := exec.QueryRowContext(ctx, sql, createdAt, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checkin_logs exists")
	}

	return exists, nil
}

// Exists checks if the CheckinLog row exists.
func (o *CheckinLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CheckinLogExists(ctx, exec, o.CreatedAt, o.UserID)
}
