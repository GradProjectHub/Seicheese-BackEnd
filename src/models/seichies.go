// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Seichy is an object representing the database table.
type Seichy struct {
	SeichiID   int           `boil:"seichi_id" json:"seichi_id" toml:"seichi_id" yaml:"seichi_id"`
	UserID     uint          `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	SeichiName string        `boil:"seichi_name" json:"seichi_name" toml:"seichi_name" yaml:"seichi_name"`
	Comment    null.String   `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	Latitude   types.Decimal `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude  types.Decimal `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	PlaceID    int           `boil:"place_id" json:"place_id" toml:"place_id" yaml:"place_id"`
	ContentID  int           `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	CreatedAt  null.Time     `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time     `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *seichyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seichyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeichyColumns = struct {
	SeichiID   string
	UserID     string
	SeichiName string
	Comment    string
	Latitude   string
	Longitude  string
	PlaceID    string
	ContentID  string
	CreatedAt  string
	UpdatedAt  string
}{
	SeichiID:   "seichi_id",
	UserID:     "user_id",
	SeichiName: "seichi_name",
	Comment:    "comment",
	Latitude:   "latitude",
	Longitude:  "longitude",
	PlaceID:    "place_id",
	ContentID:  "content_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var SeichyTableColumns = struct {
	SeichiID   string
	UserID     string
	SeichiName string
	Comment    string
	Latitude   string
	Longitude  string
	PlaceID    string
	ContentID  string
	CreatedAt  string
	UpdatedAt  string
}{
	SeichiID:   "seichies.seichi_id",
	UserID:     "seichies.user_id",
	SeichiName: "seichies.seichi_name",
	Comment:    "seichies.comment",
	Latitude:   "seichies.latitude",
	Longitude:  "seichies.longitude",
	PlaceID:    "seichies.place_id",
	ContentID:  "seichies.content_id",
	CreatedAt:  "seichies.created_at",
	UpdatedAt:  "seichies.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SeichyWhere = struct {
	SeichiID   whereHelperint
	UserID     whereHelperuint
	SeichiName whereHelperstring
	Comment    whereHelpernull_String
	Latitude   whereHelpertypes_Decimal
	Longitude  whereHelpertypes_Decimal
	PlaceID    whereHelperint
	ContentID  whereHelperint
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	SeichiID:   whereHelperint{field: "`seichies`.`seichi_id`"},
	UserID:     whereHelperuint{field: "`seichies`.`user_id`"},
	SeichiName: whereHelperstring{field: "`seichies`.`seichi_name`"},
	Comment:    whereHelpernull_String{field: "`seichies`.`comment`"},
	Latitude:   whereHelpertypes_Decimal{field: "`seichies`.`latitude`"},
	Longitude:  whereHelpertypes_Decimal{field: "`seichies`.`longitude`"},
	PlaceID:    whereHelperint{field: "`seichies`.`place_id`"},
	ContentID:  whereHelperint{field: "`seichies`.`content_id`"},
	CreatedAt:  whereHelpernull_Time{field: "`seichies`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`seichies`.`updated_at`"},
}

// SeichyRels is where relationship names are stored.
var SeichyRels = struct {
	User    string
	Place   string
	Content string
}{
	User:    "User",
	Place:   "Place",
	Content: "Content",
}

// seichyR is where relationships are stored.
type seichyR struct {
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
	Place   *Place   `boil:"Place" json:"Place" toml:"Place" yaml:"Place"`
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
}

// NewStruct creates a new relationship struct
func (*seichyR) NewStruct() *seichyR {
	return &seichyR{}
}

func (r *seichyR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *seichyR) GetPlace() *Place {
	if r == nil {
		return nil
	}
	return r.Place
}

func (r *seichyR) GetContent() *Content {
	if r == nil {
		return nil
	}
	return r.Content
}

// seichyL is where Load methods for each relationship are stored.
type seichyL struct{}

var (
	seichyAllColumns            = []string{"seichi_id", "user_id", "seichi_name", "comment", "latitude", "longitude", "place_id", "content_id", "created_at", "updated_at"}
	seichyColumnsWithoutDefault = []string{"user_id", "seichi_name", "comment", "latitude", "longitude", "place_id", "content_id"}
	seichyColumnsWithDefault    = []string{"seichi_id", "created_at", "updated_at"}
	seichyPrimaryKeyColumns     = []string{"seichi_id"}
	seichyGeneratedColumns      = []string{}
)

type (
	// SeichySlice is an alias for a slice of pointers to Seichy.
	// This should almost always be used instead of []Seichy.
	SeichySlice []*Seichy
	// SeichyHook is the signature for custom Seichy hook methods
	SeichyHook func(context.Context, boil.ContextExecutor, *Seichy) error

	seichyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seichyType                 = reflect.TypeOf(&Seichy{})
	seichyMapping              = queries.MakeStructMapping(seichyType)
	seichyPrimaryKeyMapping, _ = queries.BindMapping(seichyType, seichyMapping, seichyPrimaryKeyColumns)
	seichyInsertCacheMut       sync.RWMutex
	seichyInsertCache          = make(map[string]insertCache)
	seichyUpdateCacheMut       sync.RWMutex
	seichyUpdateCache          = make(map[string]updateCache)
	seichyUpsertCacheMut       sync.RWMutex
	seichyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seichyAfterSelectMu sync.Mutex
var seichyAfterSelectHooks []SeichyHook

var seichyBeforeInsertMu sync.Mutex
var seichyBeforeInsertHooks []SeichyHook
var seichyAfterInsertMu sync.Mutex
var seichyAfterInsertHooks []SeichyHook

var seichyBeforeUpdateMu sync.Mutex
var seichyBeforeUpdateHooks []SeichyHook
var seichyAfterUpdateMu sync.Mutex
var seichyAfterUpdateHooks []SeichyHook

var seichyBeforeDeleteMu sync.Mutex
var seichyBeforeDeleteHooks []SeichyHook
var seichyAfterDeleteMu sync.Mutex
var seichyAfterDeleteHooks []SeichyHook

var seichyBeforeUpsertMu sync.Mutex
var seichyBeforeUpsertHooks []SeichyHook
var seichyAfterUpsertMu sync.Mutex
var seichyAfterUpsertHooks []SeichyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Seichy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Seichy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Seichy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Seichy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Seichy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Seichy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Seichy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Seichy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Seichy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seichyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeichyHook registers your hook function for all future operations.
func AddSeichyHook(hookPoint boil.HookPoint, seichyHook SeichyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		seichyAfterSelectMu.Lock()
		seichyAfterSelectHooks = append(seichyAfterSelectHooks, seichyHook)
		seichyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		seichyBeforeInsertMu.Lock()
		seichyBeforeInsertHooks = append(seichyBeforeInsertHooks, seichyHook)
		seichyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		seichyAfterInsertMu.Lock()
		seichyAfterInsertHooks = append(seichyAfterInsertHooks, seichyHook)
		seichyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		seichyBeforeUpdateMu.Lock()
		seichyBeforeUpdateHooks = append(seichyBeforeUpdateHooks, seichyHook)
		seichyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		seichyAfterUpdateMu.Lock()
		seichyAfterUpdateHooks = append(seichyAfterUpdateHooks, seichyHook)
		seichyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		seichyBeforeDeleteMu.Lock()
		seichyBeforeDeleteHooks = append(seichyBeforeDeleteHooks, seichyHook)
		seichyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		seichyAfterDeleteMu.Lock()
		seichyAfterDeleteHooks = append(seichyAfterDeleteHooks, seichyHook)
		seichyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		seichyBeforeUpsertMu.Lock()
		seichyBeforeUpsertHooks = append(seichyBeforeUpsertHooks, seichyHook)
		seichyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		seichyAfterUpsertMu.Lock()
		seichyAfterUpsertHooks = append(seichyAfterUpsertHooks, seichyHook)
		seichyAfterUpsertMu.Unlock()
	}
}

// One returns a single seichy record from the query.
func (q seichyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Seichy, error) {
	o := &Seichy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seichies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Seichy records from the query.
func (q seichyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeichySlice, error) {
	var o []*Seichy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Seichy slice")
	}

	if len(seichyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Seichy records in the query.
func (q seichyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seichies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seichyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seichies exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Seichy) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Place pointed to by the foreign key.
func (o *Seichy) Place(mods ...qm.QueryMod) placeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`place_id` = ?", o.PlaceID),
	}

	queryMods = append(queryMods, mods...)

	return Places(queryMods...)
}

// Content pointed to by the foreign key.
func (o *Seichy) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`content_id` = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seichyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeichy interface{}, mods queries.Applicator) error {
	var slice []*Seichy
	var object *Seichy

	if singular {
		var ok bool
		object, ok = maybeSeichy.(*Seichy)
		if !ok {
			object = new(Seichy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeichy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeichy))
			}
		}
	} else {
		s, ok := maybeSeichy.(*[]*Seichy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeichy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeichy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seichyR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seichyR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Seichies = append(foreign.R.Seichies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Seichies = append(foreign.R.Seichies, local)
				break
			}
		}
	}

	return nil
}

// LoadPlace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seichyL) LoadPlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeichy interface{}, mods queries.Applicator) error {
	var slice []*Seichy
	var object *Seichy

	if singular {
		var ok bool
		object, ok = maybeSeichy.(*Seichy)
		if !ok {
			object = new(Seichy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeichy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeichy))
			}
		}
	} else {
		s, ok := maybeSeichy.(*[]*Seichy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeichy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeichy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seichyR{}
		}
		args[object.PlaceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seichyR{}
			}

			args[obj.PlaceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`places`),
		qm.WhereIn(`places.place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Place")
	}

	var resultSlice []*Place
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Place")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for places")
	}

	if len(placeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Place = foreign
		if foreign.R == nil {
			foreign.R = &placeR{}
		}
		foreign.R.Seichies = append(foreign.R.Seichies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlaceID == foreign.PlaceID {
				local.R.Place = foreign
				if foreign.R == nil {
					foreign.R = &placeR{}
				}
				foreign.R.Seichies = append(foreign.R.Seichies, local)
				break
			}
		}
	}

	return nil
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seichyL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeichy interface{}, mods queries.Applicator) error {
	var slice []*Seichy
	var object *Seichy

	if singular {
		var ok bool
		object, ok = maybeSeichy.(*Seichy)
		if !ok {
			object = new(Seichy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeichy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeichy))
			}
		}
	} else {
		s, ok := maybeSeichy.(*[]*Seichy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeichy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeichy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &seichyR{}
		}
		args[object.ContentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seichyR{}
			}

			args[obj.ContentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`contents`),
		qm.WhereIn(`contents.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contents")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		if foreign.R == nil {
			foreign.R = &contentR{}
		}
		foreign.R.Seichies = append(foreign.R.Seichies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ContentID {
				local.R.Content = foreign
				if foreign.R == nil {
					foreign.R = &contentR{}
				}
				foreign.R.Seichies = append(foreign.R.Seichies, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the seichy to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Seichies.
func (o *Seichy) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `seichies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, seichyPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.SeichiID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &seichyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Seichies: SeichySlice{o},
		}
	} else {
		related.R.Seichies = append(related.R.Seichies, o)
	}

	return nil
}

// SetPlace of the seichy to the related item.
// Sets o.R.Place to related.
// Adds o to related.R.Seichies.
func (o *Seichy) SetPlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Place) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `seichies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"place_id"}),
		strmangle.WhereClause("`", "`", 0, seichyPrimaryKeyColumns),
	)
	values := []interface{}{related.PlaceID, o.SeichiID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlaceID = related.PlaceID
	if o.R == nil {
		o.R = &seichyR{
			Place: related,
		}
	} else {
		o.R.Place = related
	}

	if related.R == nil {
		related.R = &placeR{
			Seichies: SeichySlice{o},
		}
	} else {
		related.R.Seichies = append(related.R.Seichies, o)
	}

	return nil
}

// SetContent of the seichy to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.Seichies.
func (o *Seichy) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `seichies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"content_id"}),
		strmangle.WhereClause("`", "`", 0, seichyPrimaryKeyColumns),
	)
	values := []interface{}{related.ContentID, o.SeichiID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ContentID
	if o.R == nil {
		o.R = &seichyR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	if related.R == nil {
		related.R = &contentR{
			Seichies: SeichySlice{o},
		}
	} else {
		related.R.Seichies = append(related.R.Seichies, o)
	}

	return nil
}

// Seichies retrieves all the records using an executor.
func Seichies(mods ...qm.QueryMod) seichyQuery {
	mods = append(mods, qm.From("`seichies`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`seichies`.*"})
	}

	return seichyQuery{q}
}

// FindSeichy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeichy(ctx context.Context, exec boil.ContextExecutor, seichiID int, selectCols ...string) (*Seichy, error) {
	seichyObj := &Seichy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `seichies` where `seichi_id`=?", sel,
	)

	q := queries.Raw(query, seichiID)

	err := q.Bind(ctx, exec, seichyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seichies")
	}

	if err = seichyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seichyObj, err
	}

	return seichyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Seichy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seichies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seichyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seichyInsertCacheMut.RLock()
	cache, cached := seichyInsertCache[key]
	seichyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seichyAllColumns,
			seichyColumnsWithDefault,
			seichyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seichyType, seichyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seichyType, seichyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `seichies` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `seichies` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `seichies` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, seichyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seichies")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SeichiID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == seichyMapping["seichi_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SeichiID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for seichies")
	}

CacheNoHooks:
	if !cached {
		seichyInsertCacheMut.Lock()
		seichyInsertCache[key] = cache
		seichyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Seichy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Seichy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seichyUpdateCacheMut.RLock()
	cache, cached := seichyUpdateCache[key]
	seichyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seichyAllColumns,
			seichyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seichies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `seichies` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, seichyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seichyType, seichyMapping, append(wl, seichyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seichies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seichies")
	}

	if !cached {
		seichyUpdateCacheMut.Lock()
		seichyUpdateCache[key] = cache
		seichyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q seichyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seichies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seichies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeichySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seichyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `seichies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seichyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in seichy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all seichy")
	}
	return rowsAff, nil
}

var mySQLSeichyUniqueColumns = []string{
	"seichi_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Seichy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seichies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seichyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSeichyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seichyUpsertCacheMut.RLock()
	cache, cached := seichyUpsertCache[key]
	seichyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			seichyAllColumns,
			seichyColumnsWithDefault,
			seichyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seichyAllColumns,
			seichyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert seichies, could not build update column list")
		}

		ret := strmangle.SetComplement(seichyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`seichies`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `seichies` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(seichyType, seichyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seichyType, seichyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for seichies")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SeichiID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == seichyMapping["seichi_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(seichyType, seichyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for seichies")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for seichies")
	}

CacheNoHooks:
	if !cached {
		seichyUpsertCacheMut.Lock()
		seichyUpsertCache[key] = cache
		seichyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Seichy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Seichy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Seichy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seichyPrimaryKeyMapping)
	sql := "DELETE FROM `seichies` WHERE `seichi_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seichies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seichies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seichyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seichyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seichies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seichies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeichySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seichyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seichyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `seichies` WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 0, seichyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seichy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seichies")
	}

	if len(seichyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Seichy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeichy(ctx, exec, o.SeichiID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeichySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeichySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seichyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `seichies`.* FROM `seichies` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seichyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeichySlice")
	}

	*o = slice

	return nil
}

// SeichyExists checks if the Seichy row exists.
func SeichyExists(ctx context.Context, exec boil.ContextExecutor, seichiID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `seichies` where `seichi_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, seichiID)
	}
	row := exec.QueryRowContext(ctx, sql, seichiID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seichies exists")
	}

	return exists, nil
}

// Exists checks if the Seichy row exists.
func (o *Seichy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SeichyExists(ctx, exec, o.SeichiID)
}
